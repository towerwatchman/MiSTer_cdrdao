name: Build cdrdao for MiSTer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GCC_VERSION: 10.2-2020.11
      CDRDAO_VERSION: 1.2.5
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf automake libtool wget \
            binfmt-support qemu-user-static \
            bc bison curl flex gcc git \
            libelf-dev libgmp3-dev libiberty-dev liblz4-tool libmpc-dev \
            libncurses-dev libncurses5-dev libpci-dev libssl-dev libudev-dev \
            lzop openssl qemu-user sharutils u-boot-tools unzip

      - name: Setup QEMU for ARM
        run: |
          sudo cp /usr/bin/qemu-arm-static /usr/local/bin/
          sudo update-binfmts --install qemu-arm /usr/local/bin/qemu-arm-static \
            --magic "\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00" \
            --mask "\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"

      - name: Download and setup ARM toolchain
        run: |
          wget -q -c https://developer.arm.com/-/media/Files/downloads/gnu-a/${GCC_VERSION}/binrel/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz
          sudo mkdir -p /opt
          sudo tar xf gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz -C /opt
          rm gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz
          export PATH=/opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/bin:$PATH
          echo "PATH=$PATH" >> $GITHUB_ENV
          ls -la /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/bin
          which arm-none-linux-gnueabihf-gcc || { echo "ARM GCC not found in this step"; exit 1; }

      - name: Verify toolchain
        run: |
          echo "Current PATH: $PATH"
          which arm-none-linux-gnueabihf-gcc || { echo "ARM GCC not found"; exit 1; }
          which arm-none-linux-gnueabihf-g++ || { echo "ARM G++ not found"; exit 1; }
          which arm-none-linux-gnueabihf-objdump || { echo "ARM objdump not found"; exit 1; }
          arm-none-linux-gnueabihf-gcc --version

      - name: Setup ARM library symlinks
        run: |
          sudo ln -sf /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/arm-none-linux-gnueabihf/libc/lib/ld-linux-armhf.so.3 /lib/ld-linux-armhf.so.3
          sudo ln -sf /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/arm-none-linux-gnueabihf/libc/lib/libc.so.6 /lib/libc.so.6
          sudo ln -sf /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/arm-none-linux-gnueabihf/libc/lib/libpthread.so.0 /lib/libpthread.so.0

      - name: Download and extract cdrdao
        run: |
          wget -q https://github.com/cdrdao/cdrdao/releases/download/rel_${CDRDAO_VERSION//./_}/cdrdao-${CDRDAO_VERSION}.tar.bz2
          tar xf cdrdao-${CDRDAO_VERSION}.tar.bz2
          rm cdrdao-${CDRDAO_VERSION}.tar.bz2

      - name: Configure and build for ARM (MiSTer)
        run: |
          cd cdrdao-${CDRDAO_VERSION}
          ./configure --host=arm-none-linux-gnueabihf CC=arm-none-linux-gnueabihf-gcc CXX=arm-none-linux-gnueabihf-g++ || { echo "Configure failed"; exit 1; }
          make all || { echo "Make failed"; exit 1; }
          if [ ! -f dao/cdrdao ]; then
            echo "Error: cdrdao binary not found at dao/cdrdao"
            ls -la dao/
            exit 1
          fi

      - name: Verify build
        run: |
          cd cdrdao-${CDRDAO_VERSION}
          file dao/cdrdao
          arm-none-linux-gnueabihf-objdump -d dao/cdrdao | head -n 20

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cdrdao-mister
          path: cdrdao-${CDRDAO_VERSION}/dao/cdrdao
          if-no-files-found: error
