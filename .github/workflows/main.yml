name: Build CDRDAO for MiSTer

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions: write-all

jobs:
  build_mister_cdrdao:
    runs-on: ubuntu-latest

    env:
      CDRDAO_VERSION: 1.2.5
      CDRDAO_RELEASE: rel_1_2_5
      GCC_VERSION: 10.2-2020.11

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq \
            binfmt-support qemu-user-static autoconf bc bison build-essential curl \
            flex gcc git libelf-dev libgmp3-dev libiberty-dev liblz4-tool libmpc-dev \
            libncurses-dev libncurses5-dev libpci-dev libssl-dev libudev-dev lzop \
            openssl qemu-user sharutils u-boot-tools unzip

      - name: Setup QEMU for ARM
        run: |
          sudo cp /usr/bin/qemu-arm-static /usr/local/bin/
          sudo update-binfmts --install qemu-arm /usr/local/bin/qemu-arm-static \
            --magic "\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00" \
            --mask "\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff" || true

      - name: Install Linaro GCC 10.2
        run: |
          wget -q -c https://developer.arm.com/-/media/Files/downloads/gnu-a/${GCC_VERSION}/binrel/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz
          sudo mkdir -p /opt
          sudo tar xf gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz -C /opt
          rm gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz
          export PATH=/opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/bin:$PATH
          arm-none-linux-gnueabihf-gcc --version

      - name: Setup ARM Library Symlinks
        run: |
          sudo ln -sf /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/arm-none-linux-gnueabihf/libc/lib/ld-linux-armhf.so.3 /lib/ld-linux-armhf.so.3
          sudo ln -sf /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/arm-none-linux-gnueabihf/libc/lib/libc.so.6 /lib/libc.so.6
          sudo ln -sf /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/arm-none-linux-gnueabihf/libc/lib/libpthread.so.0 /lib/libpthread.so.0

      - name: Build CDRDAO
        run: |
          export PATH=/opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/bin:$PATH
          STARTDIR=$PWD
          wget -q https://github.com/cdrdao/cdrdao/releases/download/${CDRDAO_RELEASE}/cdrdao-${CDRDAO_VERSION}.tar.bz2
          tar xf cdrdao-${CDRDAO_VERSION}.tar.bz2
          cd cdrdao-${CDRDAO_VERSION}
          ./configure --host=arm-none-linux-gnueabihf
          make -j$(nproc)
          mkdir -p $STARTDIR/Scripts/.config/mister-cdrdao
          mv -v ./dao/cdrdao ./utils/toc2cue $STARTDIR/Scripts/.config/mister-cdrdao
          cd $STARTDIR
          rm -rf cdrdao-${CDRDAO_VERSION} cdrdao-${CDRDAO_VERSION}.tar.bz2

      - name: Verify Build
        run: |
          cd Scripts/.config/mister-cdrdao
          file cdrdao
          file toc2cue
          ldd cdrdao || true
          strings cdrdao | grep -i gcc || true

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          cp Scripts/.config/mister-cdrdao/cdrdao artifacts/
          cp Scripts/.config/mister-cdrdao/toc2cue artifacts/
          tar -czf cdrdao-mister.tar.gz -C artifacts .

      - name: Generate Database JSON
        run: |
          # Create mister_cdrdao_db.json
          cat > mister_cdrdao_db.json << EOL
          {
            "db_id": "mister_cdrdao",
            "timestamp": $(date +%s),
            "files": {
              "_Utility/cdrdao": {
                "hash": "$(md5sum Scripts/.config/mister-cdrdao/cdrdao | cut -d' ' -f1)",
                "size": $(wc -c < Scripts/.config/mister-cdrdao/cdrdao),
                "url": "https://raw.githubusercontent.com/towerwatchman/MiSTer_cdrdao/main/Scripts/.config/mister-cdrdao/cdrdao",
                "tags": ["cdrdao", "utility"],
                "overwrite": true,
                "reboot": false
              },
              "_Utility/toc2cue": {
                "hash": "$(md5sum Scripts/.config/mister-cdrdao/toc2cue | cut -d' ' -f1)",
                "size": $(wc -c < Scripts/.config/mister-cdrdao/toc2cue),
                "url": "https://raw.githubusercontent.com/towerwatchman/MiSTer_cdrdao/main/Scripts/.config/mister-cdrdao/toc2cue",
                "tags": ["cdrdao", "utility"],
                "overwrite": true,
                "reboot": false
              }
            },
            "folders": {
              "_Utility/": {
                "tags": ["cdrdao"]
              }
            },
            "default_options": {
              "filter": "cdrdao"
            }
          }
          EOL
          # Zip the JSON file
          zip mister_cdrdao_db.json.zip mister_cdrdao_db.json

      - name: Create db Directory and Move ZIP
        run: |
          mkdir -p db
          mv mister_cdrdao_db.json.zip db/

      - name: Commit and Push Changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Scripts/.config/mister-cdrdao/*
          git add db/mister_cdrdao_db.json.zip
          git commit -m "Update cdrdao, toc2cue, and mister_cdrdao_db.json.zip for $GITHUB_SHA" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cdrdao-mister
          path: cdrdao-mister.tar.gz
          if-no-files-found: error

      - name: Create or Update GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          TAG="v${CDRDAO_VERSION}-mister-$(date +%Y%m%d)"
          echo "Attempting to create or update release with tag: $TAG"
          gh release create "$TAG" \
            --title "cdrdao ${CDRDAO_VERSION} for MiSTer" \
            --notes "Built for MiSTer FPGA (ARM). Includes cdrdao and toc2cue binaries." \
            --draft=false \
            cdrdao-mister.tar.gz || \
          gh release upload "$TAG" cdrdao-mister.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}