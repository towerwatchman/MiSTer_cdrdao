name: Build cdrdao for MiSTer FPGA

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-20.04  # Matches MiSTerâ€™s glibc 2.31
    env:
      GCC_VERSION: 10.2-2020.11
      CDRDAO_VERSION: 1.2.5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git wget unzip zlib1g-dev libncurses5-dev

      - name: Install Linaro GCC 10.2
        run: |
          wget https://developer.arm.com/-/media/Files/downloads/gnu-a/${GCC_VERSION}/binrel/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz
          sudo mkdir -p /opt/gcc-10.2-arm
          sudo tar -xf gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz -C /opt/gcc-10.2-arm --strip-components=1
          rm gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz

      - name: Build PCCTS Tools for Host
        run: |
          # Download and extract cdrdao source
          wget https://github.com/cdrdao/cdrdao/releases/download/rel_${CDRDAO_VERSION//./_}/cdrdao-${CDRDAO_VERSION}.tar.bz2
          tar -xjf cdrdao-${CDRDAO_VERSION}.tar.bz2
          # Copy pccts directory to build separately
          cp -r cdrdao-${CDRDAO_VERSION}/pccts pccts-host
          cd pccts-host
          # Build antlr and dlg for host
          gcc -o antlr/antlr antlr/*.c -Iantlr
          gcc -o dlg/dlg dlg/*.c -Idlg
          # Verify host tools
          ./antlr/antlr --version || { echo "antlr build failed"; exit 1; }
          ./dlg/dlg --version || { echo "dlg build failed"; exit 1; }
          cd ..

      - name: Build cdrdao for ARM
        run: |
          # Set up ARM cross-compiler
          export PATH=/opt/gcc-10.2-arm/bin:$PATH
          export CC=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc
          export CXX=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-g++
          export LD=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-ld
          export AR=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-ar
          export RANLIB=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-ranlib
          export CFLAGS="-march=armv7-a -mfloat-abi=hard -mfpu=vfpv3-d16 -fPIC"
          export LDFLAGS="-L/usr/arm-none-linux-gnueabihf/lib -Wl,--no-as-needed"
          # Verify toolchain
          $CC --version
          $RANLIB --version

          cd cdrdao-${CDRDAO_VERSION}
          # Use host-built PCCTS tools
          cp ../pccts-host/antlr/antlr pccts/antlr/
          cp ../pccts-host/dlg/dlg pccts/dlg/
          ./configure --host=arm-none-linux-gnueabihf --prefix=/usr/arm-none-linux-gnueabihf
          make -j$(nproc)
          if [ ! -f dao/cdrdao ] || [ ! -f utils/toc2cue ]; then
            echo "Error: Required binaries not found"
            ls -la dao/
            ls -la utils/
            exit 1
          fi

      - name: Verify build
        run: |
          cd cdrdao-${CDRDAO_VERSION}
          file dao/cdrdao
          file utils/toc2cue
          arm-none-linux-gnueabihf-objdump -d dao/cdrdao | head -n 20

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          cp cdrdao-${CDRDAO_VERSION}/dao/cdrdao artifacts/cdrdao
          cp cdrdao-${CDRDAO_VERSION}/utils/toc2cue artifacts/toc2cue
          tar -czf cdrdao-mister.tar.gz -C artifacts .

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cdrdao-mister
          path: cdrdao-mister.tar.gz
          if-no-files-found: error

      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          TAG="v${CDRDAO_VERSION}-mister-$(date +%Y%m%d)"
          echo "Creating release with tag: $TAG"
          gh release create "$TAG" \
            --title "cdrdao ${CDRDAO_VERSION} for MiSTer" \
            --notes "Built for MiSTer FPGA (ARM). Includes cdrdao and toc2cue binaries." \
            --draft=false \
            cdrdao-mister.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}