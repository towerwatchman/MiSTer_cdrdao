name: Build CDRDAO for MiSTer

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions: write-all

jobs:
  build_mister_cdrdao:
    runs-on: ubuntu-latest

    env:
      CDRDAO_VERSION: 1.2.5
      CDRDAO_RELEASE: rel_1_2_5
      BINMERGE_VERSION: 1.0.3
      GCC_VERSION: 10.2-2020.11

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq \
            binfmt-support qemu-user-static autoconf bc bison build-essential curl \
            flex gcc git libelf-dev libgmp3-dev libiberty-dev liblz4-tool libmpc-dev \
            libncurses-dev libncurses5-dev libpci-dev libssl-dev libudev-dev lzop \
            openssl qemu-user sharutils u-boot-tools unzip

      - name: Setup QEMU for ARM
        run: |
          sudo cp /usr/bin/qemu-arm-static /usr/local/bin/
          sudo update-binfmts --install qemu-arm /usr/local/bin/qemu-arm-static \
            --magic "\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00" \
            --mask "\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff" || true

      - name: Install Linaro GCC 10.2
        run: |
          wget -q -c https://developer.arm.com/-/media/Files/downloads/gnu-a/${GCC_VERSION}/binrel/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz
          sudo mkdir -p /opt
          sudo tar xf gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz -C /opt
          rm gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf.tar.xz
          export PATH=/opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/bin:$PATH
          if [ ! -f /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/bin/arm-none-linux-gnueabihf-gcc ]; then
            echo "Error: Toolchain binary not found"
            ls -la /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/bin/
            exit 1
          fi
          arm-none-linux-gnueabihf-gcc --version

      - name: Setup ARM Library Symlinks
        run: |
          sudo ln -sf /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/arm-none-linux-gnueabihf/libc/lib/ld-linux-armhf.so.3 /lib/ld-linux-armhf.so.3
          sudo ln -sf /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/arm-none-linux-gnueabihf/libc/lib/libc.so.6 /lib/libc.so.6
          sudo ln -sf /opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/arm-none-linux-gnueabihf/libc/lib/libpthread.so.0 /lib/libpthread.so.0

      - name: Build CDRDAO and Binmerge
        run: |
          export PATH=/opt/gcc-arm-${GCC_VERSION}-x86_64-arm-none-linux-gnueabihf/bin:$PATH
          STARTDIR=$PWD
          # Build binmerge
          wget -q https://github.com/putnam/binmerge/releases/download/${BINMERGE_VERSION}/binmerge-${BINMERGE_VERSION}.zip
          unzip binmerge-${BINMERGE_VERSION}.zip
          mkdir -p $STARTDIR/Scripts/.config/mister-cdrdao
          mv -v binmerge-${BINMERGE_VERSION}/binmerge $STARTDIR/Scripts/.config/mister-cdrdao
          rm -rf binmerge-${BINMERGE_VERSION} binmerge-${BINMERGE_VERSION}.zip
          # Build cdrdao
          wget -q https://github.com/cdrdao/cdrdao/releases/download/${CDRDAO_RELEASE}/cdrdao-${CDRDAO_VERSION}.tar.bz2
          tar xf cdrdao-${CDRDAO_VERSION}.tar.bz2
          cd cdrdao-${CDRDAO_VERSION}
          ./configure --host=arm-none-linux-gnueabihf
          make -j$(nproc)
          mv -v ./dao/cdrdao ./utils/toc2cue $STARTDIR/Scripts/.config/mister-cdrdao
          cd $STARTDIR
          rm -rf cdrdao-${CDRDAO_VERSION} cdrdao-${CDRDAO_VERSION}.tar.bz2

      - name: Download Redump DAT Files
        run: |
          STARTDIR=$PWD
          for target in PSX:psx Saturn:ss MegaCD:mcd TGFX16-CD:pce NeoGeo-CD:ngcd; do
            system=$(echo $target | awk -F: '{print $1}')
            url=$(echo $target | awk -F: '{print $2}')
            echo "==> Downloading ${system} dat file..."
            wget -q http://redump.org/datfile/${url}/ -O ${system}.zip
            unzip -p ${system}.zip > $STARTDIR/Scripts/.config/mister-cdrdao/${system}.dat
            rm ${system}.zip
          done

      - name: Verify Build
        run: |
          cd Scripts/.config/mister-cdrdao
          file cdrdao
          file toc2cue
          file binmerge
          ldd cdrdao || true
          strings cdrdao | grep -i gcc || true

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          cp Scripts/.config/mister-cdrdao/cdrdao artifacts/
          cp Scripts/.config/mister-cdrdao/toc2cue artifacts/
          cp Scripts/.config/mister-cdrdao/binmerge artifacts/
          cp Scripts/.config/mister-cdrdao/*.dat artifacts/
          tar -czf cdrdao-mister.tar.gz -C artifacts .

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cdrdao-mister
          path: cdrdao-mister.tar.gz
          if-no-files-found: error

      - name: Commit and Push Changes
        uses: devops-infra/action-commit-push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit_message: Updated Scripts directory

      - name: Create or Update GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          TAG="v${CDRDAO_VERSION}-mister-$(date +%Y%m%d)"
          echo "Attempting to create or update release with tag: $TAG"
          gh release create "$TAG" \
            --title "cdrdao ${CDRDAO_VERSION} for MiSTer" \
            --notes "Built for MiSTer FPGA (ARM). Includes cdrdao, toc2cue, binmerge, and Redump DAT files." \
            --draft=false \
            cdrdao-mister.tar.gz || \
          gh release upload "$TAG" cdrdao-mister.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
